pub struct Solution;

const MOD: i64 = 1_000_000_007;
impl Solution {
    pub fn rectangle_area(rectangles: Vec<Vec<i32>>) -> i32 {
        let len = rectangles.len();
        let mut intersections = vec![vec![]; len + 1];
        intersections[0].push((0,0,1_000_000_000,1_000_000_000));
        for rect in rectangles {
            let rect = (
                rect[0] as i64, rect[1] as i64,
                rect[2] as i64 , rect[3] as i64);
            for i in 0..len {
                let i = len - i;
                let mut new: Vec<_> = intersections[i - 1]
                    .iter()
                    .filter_map(|r| {
                        intersect(&rect, r)
                    })
                    .collect();
                intersections[i].append(&mut new);
            }
        }
        let ret = intersections[1..]
            .iter()
            .enumerate()
            .map(|(k, v)| {
                let sign = if k % 2 == 0 { 1 } else { -1 };
                // make sure it is positive
                v.iter().map(area).sum::<i64>() * sign % MOD + MOD
            })
            .sum::<i64>();
        (ret % MOD) as i32
    }
}

type Rect = (i64, i64, i64, i64);
fn intersect(rect1: &Rect, rect2: &Rect) -> Option<Rect> {
    let (x1, y1, x2, y2) = rect1;
    let (x3, y3, x4, y4) = rect2;
    let nx1 = x1.max(x3);
    let ny1 = y1.max(y3);
    let nx2 = x2.min(x4);
    let ny2 = y2.min(y4);
    if nx1 >= nx2 || ny1 >= ny2 {
        None
    } else {
        Some((*nx1, *ny1, *nx2, *ny2))
    }
}

fn area(rect: &Rect) -> i64 {
    let (x1, y1, x2, y2) = rect;
    (x2 - x1) * (y2 - y1) % MOD
}

#[test]
fn test() {
    // let nested = nested![[224386961,128668997,546647847,318900555],[852286866,238086790,992627088,949888275],[160239672,137108804,398130330,944807066],[431047948,462092719,870611028,856851714],[736895365,511285772,906155231,721626624],[289309389,607009433,558359552,883664714],[780746435,397872372,931219192,863727103],[573523994,124874359,889018012,471879750],[619886375,149607927,727026507,446976526],[51739879,716225241,115331335,785850603],[171077223,267051983,548436248,349498903],[314437215,169054168,950814572,481179241],[64126215,646689712,595562376,829164135],[926011655,481539702,982179297,832455610],[40370235,231510218,770233582,851797196],[292546319,45032676,413358795,783606009],[424366277,369838051,453541063,777456024],[211837048,142665527,217366958,952362711],[228416869,402115549,672143142,644930626],[755018294,194555696,846854520,939022548],[192890972,586071668,992336688,759060552],[127869582,392855032,338983665,954245205],[665603955,208757599,767586006,276627875],[260384651,10960359,736299693,761411808],[46440611,559601039,911666265,904518674],[54013763,90331595,332153447,106222561],[73093292,378586103,423488105,826750366],[327100855,516514806,676134763,653520887],[930781786,407609872,960671631,510621750],[35479655,449171431,931212840,617916927]];
    let nested = nested![[28529643,366404266,870200604,418924945],[330610102,77172054,781347527,869147474],[807316472,500800979,956361292,718948486],[781144168,946085496,912559279,975509032],[175167427,213138414,845872325,993926632],[69846382,130665989,151408605,872526870],[185024563,181261301,556640531,601079117],[302488459,71977015,324479206,145808099],[118475333,29555755,192014042,517522041],[878437107,190223422,981511645,678209859],[497022704,954911093,949648547,993936472],[772098048,884371692,942696387,899067373],[700585437,446243174,766220457,893542476],[323028701,327955361,716704333,602108118],[71639318,226439293,434132884,917245660],[635248694,869963337,967492085,953049454],[118106477,51171363,273921412,718271108],[100961360,311199855,327435030,896045077],[359163801,115078094,668497884,723914712],[506185741,62820298,638381737,251133491],[1315377,594041872,933122208,964111775],[304916779,3587542,370290031,89125801],[468916829,709802913,712996117,940304854],[26943915,22315869,328312166,168339135],[571080777,376034333,611254437,537508894],[347052836,31054844,457656036,736942915],[484816108,696103022,906839262,972175153],[718897590,147883617,735263822,193281734],[352255077,447232810,862728204,959093182],[511405467,48228708,925172435,985027375],[410902453,218471753,994949982,416821379],[783341625,295277363,862137344,544364248],[544280579,23382177,717016377,583320622],[27666746,485205173,419146691,697463432],[263428493,591156512,295444785,972771302],[30976053,51141792,328825254,575337908],[555610130,174422784,708517405,215255603],[245761554,303434286,680624312,841784131],[71652349,456891790,648661292,761771675],[126578568,654737473,175387812,788607922]];
    assert_eq!(559349330, Solution::rectangle_area(nested));
}
