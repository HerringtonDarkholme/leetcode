pub struct Solution;

use std::collections::HashSet;

impl Solution {
    pub fn min_malware_spread(graph: Vec<Vec<i32>>, initial: Vec<i32>) -> i32 {
        let mut seen = HashSet::new();
        let mut max = 0;
        let mut max_index = initial[0];
        let mut roots: HashSet<_> = initial.clone().into_iter().collect();
        for &i in initial.iter() {
            let pre = seen.len();
            let source = Solution::dfs(&graph, i, &mut seen, &roots);
            let group = if source == 1 {seen.len() - pre } else {0};
            if group > max {
                max = group;
                max_index = i;
            } else if group == max {
                max_index = i.min(max_index);
            }
        }
        max_index
    }
    fn dfs(graph: &Vec<Vec<i32>>, start: i32, seen: &mut HashSet<i32>, roots: &HashSet<i32>) -> i32 {
        if seen.contains(&start) {
            return 0
        }
        seen.insert(start);
        let mut sum = if roots.contains(&start) {1} else {0};
        for (k, &j) in graph[start as usize].iter().enumerate() {
            if j == 1 {
                sum += Solution::dfs(graph, k as i32, seen, roots);
            }
        }
        sum
    }
}
